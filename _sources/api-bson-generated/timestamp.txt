===========
Timestamp()
===========

------------------
Constructor
------------------


Defines a Timestamp class for representing a 64-bit two's-complement
integer value, which faithfully simulates the behavior of a Java "Timestamp". This
implementation is derived from TimestampLib in GWT.


  .. js:class:: Timestamp()

   :param number low: the low (signed) 32 bits of the Timestamp.
   :param number high: the high (signed) 32 bits of the Timestamp.


Constructs a 64-bit two's-complement integer, given its low and high 32-bit
values as *signed* integers.  See the from* functions below for more
convenient ways of constructing Timestamps.



The internal representation of a Timestamp is the two given signed, 32-bit values.
We use 32-bit pieces because these are the size of integers on which
Javascript performs bit-operations.  For operations like addition and
multiplication, we split each number into 16-bit pieces, which can easily be
multiplied within Javascript's floating-point representation without overflow
or change in sign.



In the algorithms below, we frequently reduce the negative case to the
positive case by negating the input(s) and then post-processing the result.
Note that we must ALWAYS check specially whether those values are MIN_VALUE
(-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
a positive number, it overflows back into a negative).  Not handling this
case would often result in infinite recursion.


------------------
Timestamp.toString
------------------


Return the String value.

.. js:function:: Timestamp.toString([opt_radix])

   :param number [opt_radix]: the radix in which the text should be written.
   :returns: string the textual representation of this value.


----------------
Timestamp.equals
----------------


Return whether this Timestamp equals the other

.. js:function:: Timestamp.equals(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean whether this Timestamp equals the other


-------------------
Timestamp.notEquals
-------------------


Return whether this Timestamp does not equal the other.

.. js:function:: Timestamp.notEquals(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean whether this Timestamp does not equal the other.


------------------
Timestamp.lessThan
------------------


Return whether this Timestamp is less than the other.

.. js:function:: Timestamp.lessThan(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean whether this Timestamp is less than the other.


-------------------------
Timestamp.lessThanOrEqual
-------------------------


Return whether this Timestamp is less than or equal to the other.

.. js:function:: Timestamp.lessThanOrEqual(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean whether this Timestamp is less than or equal to the other.


---------------------
Timestamp.greaterThan
---------------------


Return whether this Timestamp is greater than the other.

.. js:function:: Timestamp.greaterThan(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean whether this Timestamp is greater than the other.


----------------------------
Timestamp.greaterThanOrEqual
----------------------------


Return whether this Timestamp is greater than or equal to the other.

.. js:function:: Timestamp.greaterThanOrEqual(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean whether this Timestamp is greater than or equal to the other.


-----------------
Timestamp.compare
-----------------


Compares this Timestamp with the given one.

.. js:function:: Timestamp.compare(other)

   :param timestamp other: Timestamp to compare against.
   :returns: boolean 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.


-------------
Timestamp.add
-------------


Returns the sum of this and the given Timestamp.

.. js:function:: Timestamp.add(other)

   :param timestamp other: Timestamp to add to this one.
   :returns: timestamp the sum of this and the given Timestamp.


------------------
Timestamp.subtract
------------------


Returns the difference of this and the given Timestamp.

.. js:function:: Timestamp.subtract(other)

   :param timestamp other: Timestamp to subtract from this.
   :returns: timestamp the difference of this and the given Timestamp.


------------------
Timestamp.multiply
------------------


Returns the product of this and the given Timestamp.

.. js:function:: Timestamp.multiply(other)

   :param timestamp other: Timestamp to multiply with this.
   :returns: timestamp the product of this and the other.


-------------
Timestamp.div
-------------


Returns this Timestamp divided by the given one.

.. js:function:: Timestamp.div(other)

   :param timestamp other: Timestamp by which to divide.
   :returns: timestamp this Timestamp divided by the given one.


----------------
Timestamp.modulo
----------------


Returns this Timestamp modulo the given one.

.. js:function:: Timestamp.modulo(other)

   :param timestamp other: Timestamp by which to mod.
   :returns: timestamp this Timestamp modulo the given one.


-------------
Timestamp.and
-------------


Returns the bitwise-AND of this Timestamp and the given one.

.. js:function:: Timestamp.and(other)

   :param timestamp other: the Timestamp with which to AND.
   :returns: timestamp the bitwise-AND of this and the other.


------------
Timestamp.or
------------


Returns the bitwise-OR of this Timestamp and the given one.

.. js:function:: Timestamp.or(other)

   :param timestamp other: the Timestamp with which to OR.
   :returns: timestamp the bitwise-OR of this and the other.


-------------
Timestamp.xor
-------------


Returns the bitwise-XOR of this Timestamp and the given one.

.. js:function:: Timestamp.xor(other)

   :param timestamp other: the Timestamp with which to XOR.
   :returns: timestamp the bitwise-XOR of this and the other.


-------------------
Timestamp.shiftLeft
-------------------


Returns this Timestamp with bits shifted to the left by the given amount.

.. js:function:: Timestamp.shiftLeft(numBits)

   :param number numBits: the number of bits by which to shift.
   :returns: timestamp this shifted to the left by the given amount.


--------------------
Timestamp.shiftRight
--------------------


Returns this Timestamp with bits shifted to the right by the given amount.

.. js:function:: Timestamp.shiftRight(numBits)

   :param number numBits: the number of bits by which to shift.
   :returns: timestamp this shifted to the right by the given amount.


----------------------------
Timestamp.shiftRightUnsigned
----------------------------


Returns this Timestamp with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.

.. js:function:: Timestamp.shiftRightUnsigned(numBits)

   :param number numBits: the number of bits by which to shift.
   :returns: timestamp this shifted to the right by the given amount, with zeros placed into the new leading bits.


-----------------
Timestamp.fromInt
-----------------


Returns a Timestamp representing the given (32-bit) integer value.

.. js:function:: Timestamp.fromInt(value)

   :param number value: the 32-bit integer in question.
   :returns: timestamp the corresponding Timestamp value.


--------------------
Timestamp.fromNumber
--------------------


Returns a Timestamp representing the given value, provided that it is a finite number. Otherwise, zero is returned.

.. js:function:: Timestamp.fromNumber(value)

   :param number value: the number in question.
   :returns: timestamp the corresponding Timestamp value.


------------------
Timestamp.fromBits
------------------


Returns a Timestamp representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.

.. js:function:: Timestamp.fromBits(lowBits, highBits)

   :param number lowBits: the low 32-bits.
   :param number highBits: the high 32-bits.
   :returns: timestamp the corresponding Timestamp value.


--------------------
Timestamp.fromString
--------------------


Returns a Timestamp representation of the given string, written using the given radix.

.. js:function:: Timestamp.fromString(str, opt_radix)

   :param string str: the textual representation of the Timestamp.
   :param number opt_radix: the radix in which the text is written.
   :returns: timestamp the corresponding Timestamp value.

