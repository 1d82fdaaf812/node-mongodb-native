======
Grid()
======

------------------
Constructor
------------------


A class representation of a simple Grid interface.


  .. js:class:: Grid()

   :param db db: A database instance to interact with.
   :param string [fsName]: optional different root collection for GridFS.
   :returns: grid 



---
put
---


Puts binary data to the grid



Options
 - **_id** {Any}, unique id for this file
 - **filename** {String}, name for this file.
 - **root** {String}, root collection to use. Defaults to **{GridStore.DEFAULT_ROOT_COLLECTION}**.
 - **content_type** {String}, mime type of the file. Defaults to **{GridStore.DEFAULT_CONTENT_TYPE}**.
 - **chunk_size** {Number}, size for the chunk. Defaults to **{Chunk.DEFAULT_CHUNK_SIZE}**.
 - **metadata** {Object}, arbitrary data the user wants to store.

.. js:function:: put(data[, options], callback)

   :param buffer data: buffer with Binary Data.
   :param object [options]: the options for the files.
   :param function callback: this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
   :returns: null 


---
get
---


Get binary data to the grid

.. js:function:: get(id, callback)

   :param any id: for file.
   :param function callback: this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
   :returns: null 


------
delete
------


Delete file from grid

.. js:function:: delete(id, callback)

   :param any id: for file.
   :param function callback: this will be called after this method is executed. The first parameter will contain an Error object if an error occured or null otherwise. The second parameter will contain a reference to this object.
   :returns: null 

